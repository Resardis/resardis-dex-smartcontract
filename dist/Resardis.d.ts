/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ResardisInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceInUse: TypedFunctionDescription<{
      encode([token, user]: [string, string]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([token, user]: [string, string]): string;
    }>;

    best: TypedFunctionDescription<{ encode([,]: [string, string]): string }>;

    buyAllAmount: TypedFunctionDescription<{
      encode([buyGem, buyAmt, payGem, maxFillAmount, offerType]: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    cancel: TypedFunctionDescription<{ encode([id]: [BigNumberish]): string }>;

    deposit: TypedFunctionDescription<{ encode([]: []): string }>;

    depositToken: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;

    depositWithdrawHistory: TypedFunctionDescription<{
      encode([, ,]: [string, string, BigNumberish]): string;
    }>;

    dust: TypedFunctionDescription<{ encode([]: [string]): string }>;

    dustId: TypedFunctionDescription<{ encode([]: []): string }>;

    getBestOffer: TypedFunctionDescription<{
      encode([sellGem, buyGem]: [string, string]): string;
    }>;

    getBetterOffer: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    getBuyAmount: TypedFunctionDescription<{
      encode([buyGem, payGem, payAmt]: [string, string, BigNumberish]): string;
    }>;

    getIdIndexProcessed: TypedFunctionDescription<{
      encode([owner, id]: [string, BigNumberish]): string;
    }>;

    getMinSell: TypedFunctionDescription<{
      encode([payGem]: [string]): string;
    }>;

    getOffer: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    getOfferCount: TypedFunctionDescription<{
      encode([sellGem, buyGem]: [string, string]): string;
    }>;

    getOwner: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    getPayAmount: TypedFunctionDescription<{
      encode([payGem, buyGem, buyAmt]: [string, string, BigNumberish]): string;
    }>;

    getWorseOffer: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    isActive: TypedFunctionDescription<{
      encode([id]: [BigNumberish]): string;
    }>;

    lastOfferId: TypedFunctionDescription<{ encode([]: []): string }>;

    lastOffersHistoryIndex: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    offer: TypedFunctionDescription<{
      encode([payAmt, payGem, buyAmt, buyGem, pos, rounding, offerType]: [
        BigNumberish,
        string,
        BigNumberish,
        string,
        BigNumberish,
        boolean,
        BigNumberish
      ]): string;
    }>;

    offerTypes: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    offers: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    offersHistory: TypedFunctionDescription<{
      encode([,]: [string, BigNumberish]): string;
    }>;

    offersHistoryIndices: TypedFunctionDescription<{
      encode([,]: [string, BigNumberish]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    rank: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    sellAllAmount: TypedFunctionDescription<{
      encode([payGem, payAmt, buyGem, minFillAmount, offerType]: [
        string,
        BigNumberish,
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setMinSell: TypedFunctionDescription<{
      encode([payGem, dustAmt]: [string, BigNumberish]): string;
    }>;

    setOfferType: TypedFunctionDescription<{
      encode([offerType, state]: [BigNumberish, boolean]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    span: TypedFunctionDescription<{ encode([,]: [string, string]): string }>;

    tokens: TypedFunctionDescription<{ encode([,]: [string, string]): string }>;

    tokensInUse: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    withdrawToken: TypedFunctionDescription<{
      encode([token, amount]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    LogDeposit: TypedEventDescription<{
      encodeTopics([token, user, amount, balance]: [
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    LogItemUpdate: TypedEventDescription<{
      encodeTopics([id]: [null]): string[];
    }>;

    LogKill: TypedEventDescription<{
      encodeTopics([
        id,
        pair,
        maker,
        payGem,
        buyGem,
        payAmt,
        buyAmt,
        timestamp
      ]: [
        BigNumberish | null,
        Arrayish | null,
        string | null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    LogMake: TypedEventDescription<{
      encodeTopics([
        id,
        pair,
        maker,
        payGem,
        buyGem,
        payAmt,
        buyAmt,
        timestamp,
        offerType
      ]: [
        BigNumberish | null,
        Arrayish | null,
        string | null,
        null,
        null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    LogMinSell: TypedEventDescription<{
      encodeTopics([payGem, minAmount, caller]: [null, null, null]): string[];
    }>;

    LogOfferType: TypedEventDescription<{
      encodeTopics([offerType, state]: [null, null]): string[];
    }>;

    LogOrderFilled: TypedEventDescription<{
      encodeTopics([id]: [BigNumberish | null]): string[];
    }>;

    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;

    LogSortedOffer: TypedEventDescription<{
      encodeTopics([id]: [null]): string[];
    }>;

    LogTake: TypedEventDescription<{
      encodeTopics([
        id,
        pair,
        maker,
        payGem,
        buyGem,
        taker,
        takeAmt,
        giveAmt,
        timestamp,
        offerType
      ]: [
        null,
        Arrayish | null,
        string | null,
        null,
        null,
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    LogTrade: TypedEventDescription<{
      encodeTopics([payAmt, payGem, buyAmt, buyGem, timestamp]: [
        null,
        string | null,
        null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    LogWithdraw: TypedEventDescription<{
      encodeTopics([token, user, amount, balance]: [
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class Resardis extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Resardis;
  attach(addressOrName: string): Resardis;
  deployed(): Promise<Resardis>;

  on(event: EventFilter | string, listener: Listener): Resardis;
  once(event: EventFilter | string, listener: Listener): Resardis;
  addListener(eventName: EventFilter | string, listener: Listener): Resardis;
  removeAllListeners(eventName: EventFilter | string): Resardis;
  removeListener(eventName: any, listener: Listener): Resardis;

  interface: ResardisInterface;

  functions: {
    authority(overrides?: TransactionOverrides): Promise<string>;

    "authority()"(overrides?: TransactionOverrides): Promise<string>;

    balanceInUse(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceInUse(address,address)"(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    balanceOf(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    best(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    buyAllAmount(
      buyGem: string,
      buyAmt: BigNumberish,
      payGem: string,
      maxFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "buyAllAmount(address,uint256,address,uint256,uint8)"(
      buyGem: string,
      buyAmt: BigNumberish,
      payGem: string,
      maxFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancel(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deposit(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositWithdrawHistory(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      token: string;
      amount: BigNumber;
      owner: string;
      timestamp: BigNumber;
      deposit: boolean;
      withdraw: boolean;
      0: string;
      1: BigNumber;
      2: string;
      3: BigNumber;
      4: boolean;
      5: boolean;
    }>;

    "depositWithdrawHistory(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      token: string;
      amount: BigNumber;
      owner: string;
      timestamp: BigNumber;
      deposit: boolean;
      withdraw: boolean;
      0: string;
      1: BigNumber;
      2: string;
      3: BigNumber;
      4: boolean;
      5: boolean;
    }>;

    dust(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "dust(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    dustId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "dustId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getBestOffer(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBestOffer(address,address)"(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBuyAmount(
      buyGem: string,
      payGem: string,
      payAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBuyAmount(address,address,uint256)"(
      buyGem: string,
      payGem: string,
      payAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getIdIndexProcessed(
      owner: string,
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getIdIndexProcessed(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMinSell(
      payGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMinSell(address)"(
      payGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
    }>;

    getOfferCount(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getOfferCount(address,address)"(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOwner(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    getPayAmount(
      payGem: string,
      buyGem: string,
      buyAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPayAmount(address,address,uint256)"(
      payGem: string,
      buyGem: string,
      buyAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isActive(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    lastOfferId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "lastOfferId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    lastOffersHistoryIndex(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lastOffersHistoryIndex(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offer(
      payAmt: BigNumberish,
      payGem: string,
      buyAmt: BigNumberish,
      buyGem: string,
      pos: BigNumberish,
      rounding: boolean,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "offer(uint256,address,uint256,address,uint256,bool,uint8)"(
      payAmt: BigNumberish,
      payGem: string,
      buyAmt: BigNumberish,
      buyGem: string,
      pos: BigNumberish,
      rounding: boolean,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    offerTypes(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "offerTypes(uint8)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    offers(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      payAmt: BigNumber;
      payGem: string;
      buyAmt: BigNumber;
      buyGem: string;
      owner: string;
      timestamp: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
      5: BigNumber;
    }>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      payAmt: BigNumber;
      payGem: string;
      buyAmt: BigNumber;
      buyGem: string;
      owner: string;
      timestamp: BigNumber;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: string;
      4: string;
      5: BigNumber;
    }>;

    offersHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      id: BigNumber;
      payAmt: BigNumber;
      filledPayAmt: BigNumber;
      payGem: string;
      buyAmt: BigNumber;
      filledBuyAmt: BigNumber;
      buyGem: string;
      owner: string;
      timestamp: BigNumber;
      offerType: number;
      cancelled: boolean;
      filled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: BigNumber;
      9: number;
      10: boolean;
      11: boolean;
    }>;

    "offersHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      id: BigNumber;
      payAmt: BigNumber;
      filledPayAmt: BigNumber;
      payGem: string;
      buyAmt: BigNumber;
      filledBuyAmt: BigNumber;
      buyGem: string;
      owner: string;
      timestamp: BigNumber;
      offerType: number;
      cancelled: boolean;
      filled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: BigNumber;
      9: number;
      10: boolean;
      11: boolean;
    }>;

    offersHistoryIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offersHistoryIndices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<string>;

    "owner()"(overrides?: TransactionOverrides): Promise<string>;

    rank(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      next: BigNumber;
      prev: BigNumber;
      delb: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "rank(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      next: BigNumber;
      prev: BigNumber;
      delb: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    sellAllAmount(
      payGem: string,
      payAmt: BigNumberish,
      buyGem: string,
      minFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "sellAllAmount(address,uint256,address,uint256,uint8)"(
      payGem: string,
      payAmt: BigNumberish,
      buyGem: string,
      minFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setMinSell(
      payGem: string,
      dustAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setMinSell(address,uint256)"(
      payGem: string,
      dustAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOfferType(
      offerType: BigNumberish,
      state: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setOfferType(uint8,bool)"(
      offerType: BigNumberish,
      state: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    span(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    tokensInUse(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "tokensInUse(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: TransactionOverrides): Promise<string>;

  "authority()"(overrides?: TransactionOverrides): Promise<string>;

  balanceInUse(
    token: string,
    user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceInUse(address,address)"(
    token: string,
    user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  balanceOf(
    token: string,
    user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    token: string,
    user: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  best(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "best(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  buyAllAmount(
    buyGem: string,
    buyAmt: BigNumberish,
    payGem: string,
    maxFillAmount: BigNumberish,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "buyAllAmount(address,uint256,address,uint256,uint8)"(
    buyGem: string,
    buyAmt: BigNumberish,
    payGem: string,
    maxFillAmount: BigNumberish,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancel(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deposit(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  depositToken(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "depositToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  depositWithdrawHistory(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    token: string;
    amount: BigNumber;
    owner: string;
    timestamp: BigNumber;
    deposit: boolean;
    withdraw: boolean;
    0: string;
    1: BigNumber;
    2: string;
    3: BigNumber;
    4: boolean;
    5: boolean;
  }>;

  "depositWithdrawHistory(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    token: string;
    amount: BigNumber;
    owner: string;
    timestamp: BigNumber;
    deposit: boolean;
    withdraw: boolean;
    0: string;
    1: BigNumber;
    2: string;
    3: BigNumber;
    4: boolean;
    5: boolean;
  }>;

  dust(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "dust(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  dustId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "dustId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getBestOffer(
    sellGem: string,
    buyGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBestOffer(address,address)"(
    sellGem: string,
    buyGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getBetterOffer(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBetterOffer(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getBuyAmount(
    buyGem: string,
    payGem: string,
    payAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getBuyAmount(address,address,uint256)"(
    buyGem: string,
    payGem: string,
    payAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getIdIndexProcessed(
    owner: string,
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getIdIndexProcessed(address,uint256)"(
    owner: string,
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getMinSell(
    payGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getMinSell(address)"(
    payGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getOffer(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  "getOffer(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
  }>;

  getOfferCount(
    sellGem: string,
    buyGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getOfferCount(address,address)"(
    sellGem: string,
    buyGem: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getOwner(id: BigNumberish, overrides?: TransactionOverrides): Promise<string>;

  "getOwner(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  getPayAmount(
    payGem: string,
    buyGem: string,
    buyAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getPayAmount(address,address,uint256)"(
    payGem: string,
    buyGem: string,
    buyAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  getWorseOffer(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "getWorseOffer(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  isActive(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isActive(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  lastOfferId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "lastOfferId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  lastOffersHistoryIndex(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "lastOffersHistoryIndex(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  offer(
    payAmt: BigNumberish,
    payGem: string,
    buyAmt: BigNumberish,
    buyGem: string,
    pos: BigNumberish,
    rounding: boolean,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "offer(uint256,address,uint256,address,uint256,bool,uint8)"(
    payAmt: BigNumberish,
    payGem: string,
    buyAmt: BigNumberish,
    buyGem: string,
    pos: BigNumberish,
    rounding: boolean,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  offerTypes(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "offerTypes(uint8)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  offers(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    payAmt: BigNumber;
    payGem: string;
    buyAmt: BigNumber;
    buyGem: string;
    owner: string;
    timestamp: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: string;
    5: BigNumber;
  }>;

  "offers(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    payAmt: BigNumber;
    payGem: string;
    buyAmt: BigNumber;
    buyGem: string;
    owner: string;
    timestamp: BigNumber;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: string;
    4: string;
    5: BigNumber;
  }>;

  offersHistory(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    id: BigNumber;
    payAmt: BigNumber;
    filledPayAmt: BigNumber;
    payGem: string;
    buyAmt: BigNumber;
    filledBuyAmt: BigNumber;
    buyGem: string;
    owner: string;
    timestamp: BigNumber;
    offerType: number;
    cancelled: boolean;
    filled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: BigNumber;
    9: number;
    10: boolean;
    11: boolean;
  }>;

  "offersHistory(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    id: BigNumber;
    payAmt: BigNumber;
    filledPayAmt: BigNumber;
    payGem: string;
    buyAmt: BigNumber;
    filledBuyAmt: BigNumber;
    buyGem: string;
    owner: string;
    timestamp: BigNumber;
    offerType: number;
    cancelled: boolean;
    filled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: BigNumber;
    9: number;
    10: boolean;
    11: boolean;
  }>;

  offersHistoryIndices(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "offersHistoryIndices(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  owner(overrides?: TransactionOverrides): Promise<string>;

  "owner()"(overrides?: TransactionOverrides): Promise<string>;

  rank(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    next: BigNumber;
    prev: BigNumber;
    delb: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "rank(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    next: BigNumber;
    prev: BigNumber;
    delb: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  sellAllAmount(
    payGem: string,
    payAmt: BigNumberish,
    buyGem: string,
    minFillAmount: BigNumberish,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "sellAllAmount(address,uint256,address,uint256,uint8)"(
    payGem: string,
    payAmt: BigNumberish,
    buyGem: string,
    minFillAmount: BigNumberish,
    offerType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setMinSell(
    payGem: string,
    dustAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setMinSell(address,uint256)"(
    payGem: string,
    dustAmt: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOfferType(
    offerType: BigNumberish,
    state: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setOfferType(uint8,bool)"(
    offerType: BigNumberish,
    state: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  span(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "span(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  tokens(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "tokens(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  tokensInUse(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "tokensInUse(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    LogDeposit(
      token: string | null,
      user: string | null,
      amount: null,
      balance: null
    ): EventFilter;

    LogItemUpdate(id: null): EventFilter;

    LogKill(
      id: BigNumberish | null,
      pair: Arrayish | null,
      maker: string | null,
      payGem: null,
      buyGem: null,
      payAmt: null,
      buyAmt: null,
      timestamp: null
    ): EventFilter;

    LogMake(
      id: BigNumberish | null,
      pair: Arrayish | null,
      maker: string | null,
      payGem: null,
      buyGem: null,
      payAmt: null,
      buyAmt: null,
      timestamp: null,
      offerType: null
    ): EventFilter;

    LogMinSell(payGem: null, minAmount: null, caller: null): EventFilter;

    LogOfferType(offerType: null, state: null): EventFilter;

    LogOrderFilled(id: BigNumberish | null): EventFilter;

    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;

    LogSortedOffer(id: null): EventFilter;

    LogTake(
      id: null,
      pair: Arrayish | null,
      maker: string | null,
      payGem: null,
      buyGem: null,
      taker: string | null,
      takeAmt: null,
      giveAmt: null,
      timestamp: null,
      offerType: null
    ): EventFilter;

    LogTrade(
      payAmt: null,
      payGem: string | null,
      buyAmt: null,
      buyGem: string | null,
      timestamp: BigNumberish | null
    ): EventFilter;

    LogWithdraw(
      token: string | null,
      user: string | null,
      amount: null,
      balance: null
    ): EventFilter;
  };

  estimate: {
    authority(overrides?: TransactionOverrides): Promise<BigNumber>;

    "authority()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    balanceInUse(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceInUse(address,address)"(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    balanceOf(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    best(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "best(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    buyAllAmount(
      buyGem: string,
      buyAmt: BigNumberish,
      payGem: string,
      maxFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "buyAllAmount(address,uint256,address,uint256,uint8)"(
      buyGem: string,
      buyAmt: BigNumberish,
      payGem: string,
      maxFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancel(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancel(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    deposit(overrides?: TransactionOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    depositWithdrawHistory(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "depositWithdrawHistory(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    dust(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "dust(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    dustId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "dustId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getBestOffer(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBestOffer(address,address)"(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBetterOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBetterOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getBuyAmount(
      buyGem: string,
      payGem: string,
      payAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getBuyAmount(address,address,uint256)"(
      buyGem: string,
      payGem: string,
      payAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getIdIndexProcessed(
      owner: string,
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getIdIndexProcessed(address,uint256)"(
      owner: string,
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMinSell(
      payGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMinSell(address)"(
      payGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOfferCount(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getOfferCount(address,address)"(
      sellGem: string,
      buyGem: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getOwner(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getOwner(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getPayAmount(
      payGem: string,
      buyGem: string,
      buyAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getPayAmount(address,address,uint256)"(
      payGem: string,
      buyGem: string,
      buyAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getWorseOffer(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getWorseOffer(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isActive(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isActive(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    lastOfferId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "lastOfferId()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    lastOffersHistoryIndex(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "lastOffersHistoryIndex(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offer(
      payAmt: BigNumberish,
      payGem: string,
      buyAmt: BigNumberish,
      buyGem: string,
      pos: BigNumberish,
      rounding: boolean,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offer(uint256,address,uint256,address,uint256,bool,uint8)"(
      payAmt: BigNumberish,
      payGem: string,
      buyAmt: BigNumberish,
      buyGem: string,
      pos: BigNumberish,
      rounding: boolean,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offerTypes(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offerTypes(uint8)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offers(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offers(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offersHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offersHistory(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    offersHistoryIndices(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "offersHistoryIndices(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    owner(overrides?: TransactionOverrides): Promise<BigNumber>;

    "owner()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    rank(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "rank(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    sellAllAmount(
      payGem: string,
      payAmt: BigNumberish,
      buyGem: string,
      minFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "sellAllAmount(address,uint256,address,uint256,uint8)"(
      payGem: string,
      payAmt: BigNumberish,
      buyGem: string,
      minFillAmount: BigNumberish,
      offerType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setMinSell(
      payGem: string,
      dustAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setMinSell(address,uint256)"(
      payGem: string,
      dustAmt: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setOfferType(
      offerType: BigNumberish,
      state: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setOfferType(uint8,bool)"(
      offerType: BigNumberish,
      state: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setOwner(address)"(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    span(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "span(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    tokensInUse(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "tokensInUse(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
