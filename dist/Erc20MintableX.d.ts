/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Erc20MintableXInterface extends Interface {
  functions: {
    addMinter: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    decreaseAllowance: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string;
    }>;

    increaseAllowance: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string;
    }>;

    isMinter: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    mint: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    renounceMinter: TypedFunctionDescription<{ encode([]: []): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([to, value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, value]: [string, string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    MinterAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    MinterRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Erc20MintableX extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Erc20MintableX;
  attach(addressOrName: string): Erc20MintableX;
  deployed(): Promise<Erc20MintableX>;

  on(event: EventFilter | string, listener: Listener): Erc20MintableX;
  once(event: EventFilter | string, listener: Listener): Erc20MintableX;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): Erc20MintableX;
  removeAllListeners(eventName: EventFilter | string): Erc20MintableX;
  removeListener(eventName: any, listener: Listener): Erc20MintableX;

  interface: Erc20MintableXInterface;

  functions: {
    addMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addMinter(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isMinter(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    renounceMinter(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "renounceMinter()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: TransactionOverrides): Promise<string>;

    "symbol()"(overrides?: TransactionOverrides): Promise<string>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  addMinter(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addMinter(address)"(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isMinter(account: string, overrides?: TransactionOverrides): Promise<boolean>;

  "isMinter(address)"(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  mint(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  renounceMinter(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "renounceMinter()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: TransactionOverrides): Promise<string>;

  "symbol()"(overrides?: TransactionOverrides): Promise<string>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    MinterAdded(account: string | null): EventFilter;

    MinterRemoved(account: string | null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    addMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addMinter(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isMinter(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isMinter(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    mint(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    renounceMinter(overrides?: TransactionOverrides): Promise<BigNumber>;

    "renounceMinter()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    symbol(overrides?: TransactionOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
